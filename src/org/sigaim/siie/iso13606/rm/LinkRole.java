//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.2-147 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.06.04 at 02:11:57 AM CEST 
//


package org.sigaim.siie.iso13606.rm;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for LinkRole.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="LinkRole">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="unspecified"/>
 *     &lt;enumeration value="suggests"/>
 *     &lt;enumeration value="suggestedBy"/>
 *     &lt;enumeration value="repeatOf"/>
 *     &lt;enumeration value="endorses"/>
 *     &lt;enumeration value="disagreesWith"/>
 *     &lt;enumeration value="permits"/>
 *     &lt;enumeration value="permittedBy"/>
 *     &lt;enumeration value="assumesResponsibilityFor"/>
 *     &lt;enumeration value="declines"/>
 *     &lt;enumeration value="consentsTo"/>
 *     &lt;enumeration value="consentedBy"/>
 *     &lt;enumeration value="cause"/>
 *     &lt;enumeration value="causedBy"/>
 *     &lt;enumeration value="revisedInterpretation"/>
 *     &lt;enumeration value="evidenceFor"/>
 *     &lt;enumeration value="justifiedBy"/>
 *     &lt;enumeration value="evidenceAgainst"/>
 *     &lt;enumeration value="counteredBy"/>
 *     &lt;enumeration value="indicatedBy"/>
 *     &lt;enumeration value="indicationFor"/>
 *     &lt;enumeration value="contraindicatedBy"/>
 *     &lt;enumeration value="contraindicationFor"/>
 *     &lt;enumeration value="triggerFor"/>
 *     &lt;enumeration value="triggeredBy"/>
 *     &lt;enumeration value="manifestationOf"/>
 *     &lt;enumeration value="manifestedBy"/>
 *     &lt;enumeration value="sequel"/>
 *     &lt;enumeration value="intended"/>
 *     &lt;enumeration value="anticipated"/>
 *     &lt;enumeration value="toBeAvoided"/>
 *     &lt;enumeration value="outcome"/>
 *     &lt;enumeration value="hasPrecondition"/>
 *     &lt;enumeration value="evaluation"/>
 *     &lt;enumeration value="contributesTo"/>
 *     &lt;enumeration value="revisedState"/>
 *     &lt;enumeration value="subtaskOf"/>
 *     &lt;enumeration value="documentedBy"/>
 *     &lt;enumeration value="documents"/>
 *     &lt;enumeration value="summarises"/>
 *     &lt;enumeration value="supplements"/>
 *     &lt;enumeration value="excerpts"/>
 *     &lt;enumeration value="derivedFrom"/>
 *     &lt;enumeration value="hasReferenceRanges"/>
 *     &lt;enumeration value="identifiedWithin"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "LinkRole", namespace = "http://www.iso.org/iso/search.htm?qt=13606")
@XmlEnum
public enum LinkRole {

    @XmlEnumValue("unspecified")
    UNSPECIFIED("unspecified"),
    @XmlEnumValue("suggests")
    SUGGESTS("suggests"),
    @XmlEnumValue("suggestedBy")
    SUGGESTED_BY("suggestedBy"),
    @XmlEnumValue("repeatOf")
    REPEAT_OF("repeatOf"),
    @XmlEnumValue("endorses")
    ENDORSES("endorses"),
    @XmlEnumValue("disagreesWith")
    DISAGREES_WITH("disagreesWith"),
    @XmlEnumValue("permits")
    PERMITS("permits"),
    @XmlEnumValue("permittedBy")
    PERMITTED_BY("permittedBy"),
    @XmlEnumValue("assumesResponsibilityFor")
    ASSUMES_RESPONSIBILITY_FOR("assumesResponsibilityFor"),
    @XmlEnumValue("declines")
    DECLINES("declines"),
    @XmlEnumValue("consentsTo")
    CONSENTS_TO("consentsTo"),
    @XmlEnumValue("consentedBy")
    CONSENTED_BY("consentedBy"),
    @XmlEnumValue("cause")
    CAUSE("cause"),
    @XmlEnumValue("causedBy")
    CAUSED_BY("causedBy"),
    @XmlEnumValue("revisedInterpretation")
    REVISED_INTERPRETATION("revisedInterpretation"),
    @XmlEnumValue("evidenceFor")
    EVIDENCE_FOR("evidenceFor"),
    @XmlEnumValue("justifiedBy")
    JUSTIFIED_BY("justifiedBy"),
    @XmlEnumValue("evidenceAgainst")
    EVIDENCE_AGAINST("evidenceAgainst"),
    @XmlEnumValue("counteredBy")
    COUNTERED_BY("counteredBy"),
    @XmlEnumValue("indicatedBy")
    INDICATED_BY("indicatedBy"),
    @XmlEnumValue("indicationFor")
    INDICATION_FOR("indicationFor"),
    @XmlEnumValue("contraindicatedBy")
    CONTRAINDICATED_BY("contraindicatedBy"),
    @XmlEnumValue("contraindicationFor")
    CONTRAINDICATION_FOR("contraindicationFor"),
    @XmlEnumValue("triggerFor")
    TRIGGER_FOR("triggerFor"),
    @XmlEnumValue("triggeredBy")
    TRIGGERED_BY("triggeredBy"),
    @XmlEnumValue("manifestationOf")
    MANIFESTATION_OF("manifestationOf"),
    @XmlEnumValue("manifestedBy")
    MANIFESTED_BY("manifestedBy"),
    @XmlEnumValue("sequel")
    SEQUEL("sequel"),
    @XmlEnumValue("intended")
    INTENDED("intended"),
    @XmlEnumValue("anticipated")
    ANTICIPATED("anticipated"),
    @XmlEnumValue("toBeAvoided")
    TO_BE_AVOIDED("toBeAvoided"),
    @XmlEnumValue("outcome")
    OUTCOME("outcome"),
    @XmlEnumValue("hasPrecondition")
    HAS_PRECONDITION("hasPrecondition"),
    @XmlEnumValue("evaluation")
    EVALUATION("evaluation"),
    @XmlEnumValue("contributesTo")
    CONTRIBUTES_TO("contributesTo"),
    @XmlEnumValue("revisedState")
    REVISED_STATE("revisedState"),
    @XmlEnumValue("subtaskOf")
    SUBTASK_OF("subtaskOf"),
    @XmlEnumValue("documentedBy")
    DOCUMENTED_BY("documentedBy"),
    @XmlEnumValue("documents")
    DOCUMENTS("documents"),
    @XmlEnumValue("summarises")
    SUMMARISES("summarises"),
    @XmlEnumValue("supplements")
    SUPPLEMENTS("supplements"),
    @XmlEnumValue("excerpts")
    EXCERPTS("excerpts"),
    @XmlEnumValue("derivedFrom")
    DERIVED_FROM("derivedFrom"),
    @XmlEnumValue("hasReferenceRanges")
    HAS_REFERENCE_RANGES("hasReferenceRanges"),
    @XmlEnumValue("identifiedWithin")
    IDENTIFIED_WITHIN("identifiedWithin");
    private final String value;

    LinkRole(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static LinkRole fromValue(String v) {
        for (LinkRole c: LinkRole.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
